import streamlit as st
from ultralytics import YOLO
import cv2
import numpy as np
from PIL import Image

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡πÅ‡∏Å‡πâ path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
model = YOLO("model.pt")

st.title("ü™ô ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û")

# ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô OpenCV
    image = Image.open(uploaded_file).convert("RGB")
    image_np = np.array(image)

    with st.spinner("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
        # ‡∏£‡∏±‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        results = model(image_np)[0]

        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        image_with_boxes = results.plot()  # ‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô NumPy image ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß

        # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏≠‡∏ö
        st.image(image_with_boxes, caption="üîç ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö", channels="BGR", use_column_width=True)

        # ‡∏ô‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
        boxes = results.boxes
        class_ids = boxes.cls.cpu().numpy()

        value_map = {
            0: 1,
            1: 2,
            2: 5,
            3: 10
        }
        total_value = sum([value_map.get(int(c), 0) for c in class_ids])
        coin_count = len(class_ids)

        st.success(f"üî¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö {coin_count} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç")
        st.success(f"üí∞ ‡∏£‡∏ß‡∏°‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤: {total_value} ‡∏ö‡∏≤‡∏ó")

        # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î
        for coin_class, count in zip(*np.unique(class_ids, return_counts=True)):
            coin_value = value_map.get(int(coin_class), "?")
            st.write(f"‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç {coin_value} ‡∏ö‡∏≤‡∏ó: {count} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç")
